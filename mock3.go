package main

import (
	"fmt"
	"io"

	"github.com/koron-go/srcdom"
)

func generateMockType3(w io.Writer, mockTag, mockTypn, mockPkgn string, typ *srcdom.Type, pkg *srcdom.Package) error {
	origTypn := pkg.Name + "." + typ.Name
	methods := filterMethods(typ.Methods, mockTypn)
	if len(methods) == 0 {
		return fmt.Errorf("no methods in type:%s", typ.Name)
	}

	fmt.Fprintf(w, "// Code generated by github.com/koron/mockgo; DO NOT EDIT.\n\n")
	// write headers.
	if !forTest {
		fmt.Fprintf(w, "// +build %s\n\n", mockTag)
	}
	fmt.Fprintf(w, "package %s\n\n", mockPkgn)
	fmt.Fprintf(w, "import \"github.com/koron/mockgo/mockrt3\"\n\n")

	// write the mock type.
	fmt.Fprintf(w, "// %s is a mock of %s for test.\n", mockTypn, origTypn)
	fmt.Fprintf(w, "type %s struct {\n", mockTypn)
	fmt.Fprintf(w, "\tQ *mockrt3.Q\n")
	fmt.Fprintf(w, "}\n")

	for _, m := range methods {
		fmt.Fprintf(w, "\n")

		// write parameter type for the method.
		fmt.Fprintf(w, "// %s packs input parameters of %s#%s method.\n", m.pname(), origTypn, m.name)
		fmt.Fprintf(w, "type %s struct {\n", m.pname())
		for _, a := range m.args {
			typ := toStructType(a.typ)
			fmt.Fprintf(w, "\t%s %s\n", toPub(a.name), typ)
		}
		fmt.Fprintf(w, "}\n\n")
		fmt.Fprintf(w, "// P__ implements mockrt3.P interface\n")
		fmt.Fprintf(w, "func (%s) P__() {}\n\n", m.pname())

		// write result type for the method.
		fmt.Fprintf(w, "// %s packs output parameters of %s#%s method.\n", m.rname(), origTypn, m.name)
		fmt.Fprintf(w, "type %s struct {\n", m.rname())
		for _, r := range m.rets {
			fmt.Fprintf(w, "\t%s %s\n", r.name, r.typ)
		}
		fmt.Fprintf(w, "}\n\n")
		fmt.Fprintf(w, "// R__ implements mockrt3.R interface\n")
		fmt.Fprintf(w, "func (%s) R__() {}\n\n", m.rname())

		// write mock func for the method.
		fmt.Fprintf(w, "// %s is mock of %s#%[1]s method.\n", m.name, origTypn)
		fmt.Fprintf(w, "func (_m *%s) %s(%s) (%s) {\n", mockTypn, m.name, m.args.nameTypes(), m.rets.types())
		fmt.Fprintf(w, "\t_m.Q.T().Helper()\n")
		fmt.Fprintf(w, "\t_r := (_m.Q.Call(%q, %s{%s})).(%s)\n", mockTypn+"."+m.name, m.pname(), m.args.names(), m.rname())
		fmt.Fprintf(w, "\treturn %s\n", m.rets.namesPrefix("_r"))
		fmt.Fprintf(w, "}\n")
	}
	return nil
}
